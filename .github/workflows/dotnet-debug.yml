name: Compile debug build

on:
  push:
    branches:
      - "dev"
##  pull_request:
##    types: [opened, synchronize, reopened]
##    branches:
##      - "main"


jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        hwBits: [ x64,arm64 ]
        include:
          - os: windows-latest
            platform: win
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: osx
    env:
      appVersion: v0.1e.b${{ github.run_number }}
      BuildConfig: Debug
      buildTarget: ${{ matrix.platform }}-${{ matrix.hwBits }}
      DOTNET_NOLOGO: true
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PostSharpLicense: ${{ secrets.PS_LICENSE }}
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      WORK_PATH: ${{ github.workspace }}
    steps:
    - name: Checkout Project
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Cache Nuget
      uses: actions/cache@v2
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-${{ matrix.hwBits }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.hwBits }}-nuget-
    ##- name: Persist artifact name
    ##  id: set_persistent_value
    ##  uses: aaimio/set-persistent-value@v1
    ##  with:
    ##    key: release_name
    ##    value: RMH-${{ env.appVersion }}-${{ env.buildTarget }}
    ##    access_token: ${{ secrets.PERSISTENT_VALUE_ACCESS_TOKEN }}
    ##- name: Retrieve artifact name
    ##  id: get_persistent_value
    ##  uses: aaimio/get-persistent-value@v1
    ##  with:
    ##    key: release_name
    ##    access_token: ${{ secrets.PERSISTENT_VALUE_ACCESS_TOKEN }}
    - name: Prep artifact name
      shell: bash
      run: |
        release_name=RMH-${{ env.appVersion }}-${{ env.buildTarget }}
        echo "release_name=$release_name" >> GITHUB_ENV
    - name: Build with restore
      run: |
        pushd ReadMyHosts/
        dotnet build -v m -c ${{ env.BuildConfig }} -r ${{ env.buildTarget}} -o ${{ env.WORK_PATH }}/output/
        popd
    - name: print debug information
      run: |
        printenv
      shell: bash
    - name: Create Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.release_name }}
        path: ${{ env.WORK_PATH }}/output/ # or path/to/artifact
        if-no-files-found: error
##    - name: Pack Artifacts
##      shell: bash
##      run: 7z a -tzip ${{ env.WORK_PATH }}/artifacts/${{ env.release_name }}.zip ${{ env.WORK_PATH }}/output/ -r
