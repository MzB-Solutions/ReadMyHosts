name: Compile debug build

on:
  push:
    branches:
      - "dev"
##  pull_request:
##    types: [opened, synchronize, reopened]
##    branches:
##      - "main"


jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        hwBits: [ x64,arm64 ]
        include:
          - os: windows-latest
            platform: win
          - os: ubuntu-latest
            platform: linux
## I've got nothing to prep my solution for any Mac environment
## That's why this is disabled.
##          - os: macos-latest
##            platform: osx
    env:
      appVersion: v0.1e.b${{ github.run_number }}
      buildConfig: Debug
      buildTarget: ${{ matrix.platform }}-${{ matrix.hwBits }}
      DOTNET_NOLOGO: true
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PostSharpLicense: ${{ secrets.PS_LICENSE }}
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      WORK_PATH: ${{ github.workspace }}
    steps:
    - name: Checkout Project
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Cache Nuget
      uses: actions/cache@v2
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-${{ matrix.hwBits }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.hwBits }}-nuget-
    - name: Prep tag and naming
      shell: bash
      run: |
        myTag="${appVersion}"
        myRelease="RMH-${myTag}-${{ env.buildTarget }}"
        echo "myTag=${myTag}" >> $GITHUB_ENV
        echo "myRelease=${myRelease}" >> $GITHUB_ENV
    - name: Build with restore
      run: |
        pushd ReadMyHosts/
        dotnet build -v n -c ${{ env.buildConfig }} -r ${{ env.buildTarget}} -o ${{ env.WORK_PATH }}/output/
        popd
    - name: print debug information
      run: |
        printenv
      shell: bash
    - name: Create Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.myRelease }}
        retention-days: 2
        path: ${{ env.WORK_PATH }}/output/ # or path/to/artifact
        if-no-files-found: error